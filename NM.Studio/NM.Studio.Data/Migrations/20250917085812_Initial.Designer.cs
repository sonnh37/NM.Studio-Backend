// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NM.Studio.Data.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NM.Studio.Data.Migrations
{
    [DbContext(typeof(StudioContext))]
    [Migration("20250917085812_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NM.Studio.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrideName")
                        .HasColumnType("text")
                        .HasColumnName("bride_name");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date");

                    b.Property<string>("GroomName")
                        .HasColumnType("text")
                        .HasColumnName("groom_name");

                    b.Property<int?>("HomeSortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("home_sort_order");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Photographer")
                        .HasColumnType("text")
                        .HasColumnName("photographer");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("album");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.AlbumImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid")
                        .HasColumnName("album_id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsCover")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cover");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("boolean")
                        .HasColumnName("is_thumbnail");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ImageId");

                    b.ToTable("album_image");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid?>("BackgroundCoverId")
                        .HasColumnType("uuid")
                        .HasColumnName("background_cover_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid")
                        .HasColumnName("thumbnail_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BackgroundCoverId");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("blog");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("discount_amount");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("text")
                        .HasColumnName("voucher_code");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("SelectedColor")
                        .HasColumnType("text")
                        .HasColumnName("selected_color");

                    b.Property<string>("SelectedSize")
                        .HasColumnType("text")
                        .HasColumnName("selected_size");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("cart_item");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("MediaBaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_base_id");

                    b.Property<Guid?>("MediaUrlId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_url_id");

                    b.HasKey("Id");

                    b.HasIndex("MediaBaseId")
                        .IsUnique();

                    b.HasIndex("MediaUrlId")
                        .IsUnique();

                    b.ToTable("image");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.MediaBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CreatedMediaBy")
                        .HasColumnType("text")
                        .HasColumnName("created_media_by");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTimeOffset?>("TakenMediaDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("taken_media_date");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.ToTable("media_base");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.MediaUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("UrlExternal")
                        .HasColumnType("text")
                        .HasColumnName("url_external");

                    b.Property<string>("UrlInternal")
                        .HasColumnType("text")
                        .HasColumnName("url_internal");

                    b.HasKey("Id");

                    b.ToTable("media_url");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CancelledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_date");

                    b.Property<DateTimeOffset?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text")
                        .HasColumnName("customer_email");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text")
                        .HasColumnName("customer_notes");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("text")
                        .HasColumnName("customer_phone");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("discount_amount");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text")
                        .HasColumnName("shipping_address");

                    b.Property<string>("ShippingCity")
                        .HasColumnType("text")
                        .HasColumnName("shipping_city");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("shipping_cost");

                    b.Property<string>("ShippingCountry")
                        .HasColumnType("text")
                        .HasColumnName("shipping_country");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shipping_method");

                    b.Property<string>("ShippingState")
                        .HasColumnType("text")
                        .HasColumnName("shipping_state");

                    b.Property<string>("ShippingZipCode")
                        .HasColumnType("text")
                        .HasColumnName("shipping_zip_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("text")
                        .HasColumnName("tracking_number");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("text")
                        .HasColumnName("voucher_code");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomizationNotes")
                        .HasColumnType("text")
                        .HasColumnName("customization_notes");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("discount_amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("SelectedColor")
                        .HasColumnType("text")
                        .HasColumnName("selected_color");

                    b.Property<string>("SelectedSize")
                        .HasColumnType("text")
                        .HasColumnName("selected_size");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_item");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text")
                        .HasColumnName("i_p_address");

                    b.Property<bool>("IsCustomerNotified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_customer_notified");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("NotificationError")
                        .HasColumnType("text")
                        .HasColumnName("notification_error");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("PreviousStatus")
                        .HasColumnType("text")
                        .HasColumnName("previous_status");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("order_status_history");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text")
                        .HasColumnName("billing_address");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("text")
                        .HasColumnName("billing_email");

                    b.Property<string>("BillingName")
                        .HasColumnType("text")
                        .HasColumnName("billing_name");

                    b.Property<string>("BillingPhone")
                        .HasColumnType("text")
                        .HasColumnName("billing_phone");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text")
                        .HasColumnName("failure_reason");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentProviderResponse")
                        .HasColumnType("text")
                        .HasColumnName("payment_provider_response");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Material")
                        .HasColumnType("text")
                        .HasColumnName("material");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Sku")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("sku");

                    b.Property<string>("Slug")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("sub_category_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_variant_id");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("product_image");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("deposit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("RentalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("rental_price");

                    b.Property<string>("Size")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("size");

                    b.Property<string>("Sku")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("sku");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.HasKey("Id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("ProductId", "Color", "Size")
                        .IsUnique();

                    b.ToTable("product_variant");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KeyId")
                        .HasColumnType("text")
                        .HasColumnName("key_id");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text")
                        .HasColumnName("public_key");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_token");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BackgroundCoverId")
                        .HasColumnType("uuid")
                        .HasColumnName("background_cover_id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("HomeSortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("home_sort_order");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("text")
                        .HasColumnName("terms_and_conditions");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid")
                        .HasColumnName("thumbnail_id");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundCoverId");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("service");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.ServiceBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("AppointmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appointment_date");

                    b.Property<string>("BookingNumber")
                        .HasColumnType("text")
                        .HasColumnName("booking_number");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text")
                        .HasColumnName("customer_email");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("text")
                        .HasColumnName("customer_phone");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("deposit_amount");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deposit_paid");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("service_price");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text")
                        .HasColumnName("special_requirements");

                    b.Property<string>("StaffNotes")
                        .HasColumnType("text")
                        .HasColumnName("staff_notes");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("service_booking");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("sub_category");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Cache")
                        .HasColumnType("text")
                        .HasColumnName("cache");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("Dob")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_phone_verified");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Nationality")
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<string>("Otp")
                        .HasColumnType("text")
                        .HasColumnName("otp");

                    b.Property<DateTimeOffset?>("OtpExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("otp_expiration");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTimeOffset?>("PasswordChangedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_changed_date");

                    b.Property<DateTimeOffset?>("PasswordResetExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_expiration");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_token");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PreferredLanguage")
                        .HasColumnType("text")
                        .HasColumnName("preferred_language");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("MediaBaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_base_id");

                    b.Property<Guid?>("MediaUrlId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_url_id");

                    b.Property<string>("Resolution")
                        .HasColumnType("text")
                        .HasColumnName("resolution");

                    b.HasKey("Id");

                    b.HasIndex("MediaBaseId")
                        .IsUnique();

                    b.HasIndex("MediaUrlId")
                        .IsUnique();

                    b.ToTable("video");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApplicableCategories")
                        .HasColumnType("text")
                        .HasColumnName("applicable_categories");

                    b.Property<string>("ApplicableProductIds")
                        .HasColumnType("text")
                        .HasColumnName("applicable_product_ids");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("discount_amount");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("discount_percentage");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCombinableWithOther")
                        .HasColumnType("boolean")
                        .HasColumnName("is_combinable_with_other");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFirstOrderOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_first_order_only");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MaxUsage")
                        .HasColumnType("integer")
                        .HasColumnName("max_usage");

                    b.Property<int>("MaxUsagePerUser")
                        .HasColumnType("integer")
                        .HasColumnName("max_usage_per_user");

                    b.Property<decimal>("MaximumDiscount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("maximum_discount");

                    b.Property<decimal?>("MaximumSpend")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("maximum_spend");

                    b.Property<decimal>("MinimumSpend")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("minimum_spend");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("usage_count");

                    b.Property<string>("UserGroupRestrictions")
                        .HasColumnType("text")
                        .HasColumnName("user_group_restrictions");

                    b.HasKey("Id");

                    b.ToTable("voucher");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.VoucherUsageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("discount_amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTimeOffset>("UsedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_date");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("voucher_usage_history");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.AlbumImage", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Album", "Album")
                        .WithMany("AlbumImages")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Album");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Blog", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.MediaBase", "BackgroundCover")
                        .WithMany()
                        .HasForeignKey("BackgroundCoverId");

                    b.HasOne("NM.Studio.Domain.Entities.MediaBase", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("Author");

                    b.Navigation("BackgroundCover");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Cart", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Image", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.MediaBase", "MediaBase")
                        .WithOne("Image")
                        .HasForeignKey("NM.Studio.Domain.Entities.Image", "MediaBaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.MediaUrl", "MediaUrl")
                        .WithOne("Image")
                        .HasForeignKey("NM.Studio.Domain.Entities.Image", "MediaUrlId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MediaBase");

                    b.Navigation("MediaUrl");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Order", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Payment", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Product", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("NM.Studio.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("NM.Studio.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Image");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Service", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.MediaBase", "BackgroundCover")
                        .WithMany()
                        .HasForeignKey("BackgroundCoverId");

                    b.HasOne("NM.Studio.Domain.Entities.MediaBase", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("BackgroundCover");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.ServiceBooking", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId");

                    b.HasOne("NM.Studio.Domain.Entities.User", "User")
                        .WithMany("ServiceBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Video", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.MediaBase", "MediaBase")
                        .WithOne("Video")
                        .HasForeignKey("NM.Studio.Domain.Entities.Video", "MediaBaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.MediaUrl", "MediaUrl")
                        .WithOne("Video")
                        .HasForeignKey("NM.Studio.Domain.Entities.Video", "MediaUrlId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MediaBase");

                    b.Navigation("MediaUrl");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.VoucherUsageHistory", b =>
                {
                    b.HasOne("NM.Studio.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("NM.Studio.Domain.Entities.User", "User")
                        .WithMany("VoucherUsageHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NM.Studio.Domain.Entities.Voucher", "Voucher")
                        .WithMany("VoucherUsageHistories")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Album", b =>
                {
                    b.Navigation("AlbumImages");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.MediaBase", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.MediaUrl", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Service", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ServiceBookings");

                    b.Navigation("VoucherUsageHistories");
                });

            modelBuilder.Entity("NM.Studio.Domain.Entities.Voucher", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("VoucherUsageHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
